// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id           String        @id @default(uuid())
  username     String
  imageUrl     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId       String        @unique
}

model Doctor {
  id           String        @id @default(uuid())
  strNumber    String
  imageUrl     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  department   Department?   @relation(fields: [departmentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appointments Appointment[]
  departmentId String?
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
}

model Department {
  id        String   @id @default(uuid())
  title     String?  @unique
  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now()) @updatedAt
  doctors   Doctor[]
}

model Appointment {
  id          String    @id @default(uuid())
  name        String
  description String?
  startedAt   DateTime?
  finishedAt  DateTime?
  price       Int?
  statusId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  status      Status    @relation(fields: [statusId], references: [id], onUpdate: Cascade)
  patientId   String?
  patient     Patient?  @relation(fields: [patientId], references: [id])
  doctorId    String
  doctor      Doctor    @relation(fields: [doctorId], references: [id])
}

model Status {
  id           String        @id @default(uuid())
  name         String        @unique // "Available" | "Booked" 
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

model UserRole {
  id        String   @id @default(uuid())
  symbol    String   @unique // "DOCTOR" | "PATIENT" | "ADMIN"
  name      String   @unique // "Doctor" | "Patient" | "Admin"
  sequence  Int? // "1" | "2" | "3"
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  users     User[]
}

model User {
  id         String    @id @default(uuid())
  username   String
  email      String    @unique // TODO: Multiple emails
  phone      String    @unique // TODO: Multiple phones
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  userRoleId String?
  userRole   UserRole? @relation(fields: [userRoleId], references: [id], onUpdate: Cascade)
  patient    Patient?
  doctor     Doctor?
}
