generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Doctor {
  username     String?
  strNumber    String?
  price        Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  specialistId String?
  userId       String      @unique
  specialist   Specialist? @relation(fields: [specialistId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id])
}

model Specialist {
  id        String   @id @default(uuid())
  title     String   @unique
  image     String?
  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now()) @updatedAt
  doctors   Doctor[]
}

model Appointment {
  id              String        @id @default(uuid())
  description     String?
  time            String?
  date            DateTime?
  statusId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  patientId       String?
  doctorId        String
  rejectionReason String?
  symptoms        String?
  doctor          User          @relation("doctor", fields: [doctorId], references: [id])
  patient         User?         @relation("patient", fields: [patientId], references: [id])
  status          Status        @relation(fields: [statusId], references: [id])
  notification    Notification?
}

model Status {
  id           String        @id @default(uuid())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  appointments Appointment[]
}

model User {
  id                   String         @id @default(uuid())
  name                 String
  email                String         @unique
  emailVerified        DateTime?
  phone                String?        @unique
  password             String?
  gender               UserGender?
  birthDate            DateTime?      @db.Date
  image                String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @default(now()) @updatedAt
  role                 String?        @default("patient")
  Account              Account[]
  doctorAppointments   Appointment[]  @relation("doctor")
  patientAppointments  Appointment[]  @relation("patient")
  doctor               Doctor?
  receiverNotification Notification[] @relation("receiverNotification")
  senderNotification   Notification[] @relation("senderNotification")
  Session              Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id                   String      @id @default(uuid())
  appointmentId        String      @unique
  senderId             String
  receiverId           String
  createdAt            DateTime    @default(now())
  appointment          Appointment @relation(fields: [appointmentId], references: [id])
  receiverNotification User        @relation("receiverNotification", fields: [receiverId], references: [id])
  senderNotification   User        @relation("senderNotification", fields: [senderId], references: [id])
}

enum UserGender {
  F
  M
  O
}
