// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Patient {
  username  String
  height    String?
  weight    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String   @unique
}

model Doctor {
  username     String
  strNumber    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  specialist   Specialist? @relation(fields: [specialistId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  specialistId String?
  user         User        @relation(fields: [userId], references: [id])
  userId       String      @unique
}

model Specialist {
  id        String   @id @default(uuid())
  title     String   @unique
  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now()) @updatedAt
  doctors   Doctor[]
}

model Appointment {
  id          String    @id @default(uuid())
  reason      String
  description String?
  price       Int?
  statusId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  status      Status    @relation(fields: [statusId], references: [id], onUpdate: Cascade)
  patientId   String?
  patient     User?     @relation(fields: [patientId], references: [id], "patient")
  doctorId    String
  doctor      User      @relation(fields: [doctorId], references: [id], "doctor")
  TimeSlot    TimeSlot? @relation(fields: [timeSlotId], references: [id])
  timeSlotId  String?
}

model Status {
  id           String        @id @default(uuid())
  name         String        @unique // "Available" | "Pending" |  "Rejected" | "Accepted" | "Done"
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

model TimeSlot {
  id          String        @id @default(uuid())
  time        String        @unique
  startedAt   DateTime
  finishedAt  DateTime
  appointment Appointment[]
}

model User {
  id                  String        @id @default(uuid())
  firstName           String
  lastName            String
  email               String        @unique // TODO: Multiple emails
  phone               String        @unique // TODO: Multiple phones
  password            String
  gender              UserGender
  birthDate           DateTime      @db.Date
  imageUrl            String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now()) @updatedAt
  role                String?       @default("patient") // "Doctor" | "Patient" | "Admin"
  patient             Patient?
  doctor              Doctor?
  doctorAppointments  Appointment[] @relation("doctor")
  patientAppointments Appointment[] @relation("patient")
  Account             Account[]
  Session             Session[]
}

enum UserGender {
  F
  M
  O
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
